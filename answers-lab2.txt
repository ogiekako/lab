inc/memlayout.h <- virtual address space, PageInfo
kern/pmap.c
kern/pmap.h <- manipulate PageInfo
kern/kclock.h
kern/kclock.c


少なくとも１つの Challenge problem をやること。

# Exercise 1.
In the file kern/pmap.c, you must implement code for the following functions (probably in the order given).

boot_alloc()
mem_init() (only up to the call to check_page_free_list(1))
page_init()
page_alloc()
page_free()

check_page_free_list() and check_page_alloc() test your physical page allocator. You should boot JOS and see whether check_page_alloc() reports success. Fix your code so that it passes. You may find it helpful to add your own assert()s to verify that your assumptions are correct.

PageInfo <- 4KB の page を管理

end は、.bss section の最後を指している。つまり、KERNEL のために確保している 4MB のうち、kernel 自体ではない、それより後ろの部分を、page info を
収めるのに使っている。
end は、VMA (virtual memory address) を指す。

ROUNDUP(a, n): a を一番近い n の倍数に round up した結果を返す

pde_t: page directory entry を指す pointer

inc/mmu.h:
/*
 *
 * Part 1.  Paging data structures and constants.
 *
 */

// A linear address 'la' has a three-part structure as follows:
//
// +--------10------+-------10-------+---------12----------+
// | Page Directory |   Page Table   | Offset within Page  |
// |      Index     |      Index     |                     |
// +----------------+----------------+---------------------+
//  \--- PDX(la) --/ \--- PTX(la) --/ \---- PGOFF(la) ----/
//  \---------- PGNUM(la) ----------/
//
// The PDX, PTX, PGOFF, and PGNUM macros decompose linear addresses as shown.
// To construct a linear address la from PDX(la), PTX(la), and PGOFF(la),
// use PGADDR(PDX(la), PTX(la), PGOFF(la)).

PDX: Page directory index.


UVPT: User read-only virtual page table

* ULIM, MMIOBASE -->  +------------------------------+ 0xef800000
*                     |  Cur. Page Table (User R-)   | R-/R-  PTSIZE
*    UVPT      ---->  +------------------------------+ 0xef400000

NPTENTRIES: 1024  - ページテーブル
PTSIZE: PGSIZE * NPTENTRIES

PADDR - kernel の virtual address を physical address に変換する (KERNBASE を引く)

kern_pgdir は 1 つのページディレクトリを表している。これは、1024 個の uint32_t* によって表され、全体のサイズは、4096 = PGSIZE である。（ひとつのページに収まる)

https://pdos.csail.mit.edu/6.828/2017/xv6/book-rev10.pdf の Fig 2-1 に page table の構造が書いてある。

pages - Physical page state array
page_free_list - pages の中で、free なもののリスト

In this lab, you will write the memory management code for your operating system. Memory management has two components.

1. Physical memory allocator
カーネルがメモリをallocate したり free するためのもの。4K bytes のユニット(pages)を操作する (実際のメモリ領域のうちで、実際に使われているもの、使われていないもの)
どの physical address が free, allocated なのかと、各 page をいくつのプロセスが使っているかという情報を管理する。
また、実際に physical page を allocate したり、free するコードも書く必要がある。

The second component of memory management is virtual memory, which maps the virtual addresses used by kernel and user software to addresses in physical memory. The x86 hardware's memory management unit (MMU) performs the mapping when instructions use memory, consulting a set of page tables. You will modify JOS to set up the MMU's page tables according to a specification we provide.

// At IOPHYSMEM (640K) there is a 384K hole for I/O.  From the kernel,
// IOPHYSMEM can be addressed at KERNBASE + IOPHYSMEM.  The hole ends
// at physical address EXTPHYSMEM.
#define IOPHYSMEM 0x0A0000
#define EXTPHYSMEM  0x100000

https://pdos.csail.mit.edu/6.828/2017/labs/lab1/ に書いてある、VGA Display から、BIOS ROM にわたる領域。これらには、Virtual memory をわりあてることはできない。

また、Kernel は、0x100000 以降に、4MB にわたって読み込まれるので、ここも保護しないといけない。

page2pa : page を physical address に
page2kva : page を kernel virtual address に

# Ex2.1.
できた。

# Ex2.2
Page Translation について、
https://pdos.csail.mit.edu/6.828/2017/readings/i386/s05_02.htm を読んでまとめ：

Linear Address を, Physical Address に変換する仕組み：
Linear Address は、10 bit の DIR, 10 bit の PAGE, 12 bit の OFFSET によりなる。
CR3 register は、page directory の physical address を指し、page directory は、2^10 個の 32bit int (=4byte) からなる。
CR3[DIR] (の下位 12 bit を 0 で埋めたもの) が、次に見るべき page table を指し、pagetable[PAGE] の下位 12 bit を OFFSET で置き換えたものが実際の Physical address を指す。
CR3 は、PDBR (page directory base register) とも呼ばれる。

page directory も、page directory も、同じフォーマットの 4byte int を持つ。(Figure 5-10).
page は、4K offset に align されていると仮定しているので、下位 12bit は省略でき、そこをフラグとして利用している

Segment registers:
http://flint.cs.yale.edu/cs422/doc/pc-arch.html#register
CS: Code segment register
SS: Stack segment register
DS, ES, FS, GS: data segment registers

segment とは？ http://flint.cs.yale.edu/cs422/doc/pc-arch.html#IA32 を参照。
memory addressing mode のうちで、flat memory model か segmented memory model かを、processor に指定できる。そのうち, Segment memory model で指定されるメモリの一単位
flat memory model では、メモリは linear address で指定する。
segment model では、logical address で指定し、それをプロセッサは、linear address に変換し、さらに physial address に変換する。

JOS では、paging hardware を使い、segment model は使わないが、
segment-based protection cannot be disabled on the x86, so you will need a basic understanding of it.

flat model では、application にとって、4GB のメモリ空間があるようにみえる。
segment model では更に大きく、2^46 のメモリがあるようにみえる。(2^14 - 1) このセグメントが存在し、それぞれが、2^32 のメモリ空間 (linear address space) に対応付けられるため (segmented address space)。この lienar address space のことを segment と呼ぶ。
アプリケーションは、segment selector (16bits), offset (32bit) により、論理アドレスを指定する。

どちらの model であれ、application から見た仮想アドレスと物理アドレスの間の対応は、Kernel が管理しなければらない。


Explicit に flat model を指定することはできないが、segment register が、2^32 の lineawr address space を指すようにし、その後
segment register を一切変更しないことによって、同じ効果を得られる。

boot.S は, code segment (executable segment) 以外のすべての segment register (ds, es, fs, gs, ss) を、0x10 にセットし、
code segment の segment register を 0x8 にしている。また、lgdt 命令で、gdt をセットしていて、gdt[0x8], gdt[0x10] がそれぞれ、code seg, data seg の segment desciptor を指すようにしている。

各 segment は、type flag によって、executable, readable, writable が決められている。
https://pdos.csail.mit.edu/6.828/2017/readings/i386/s06_03.htm

Data segment descriptor に関しては、writable bit を true にし、
Code segment descriptor に関しては、readable bit と executable bit を true にしている。また、ともに p flag も立てている。

# Ex 2.4
mem_init で、kern_pgdir をセットアップしたあと、
// If the machine reboots at this point, you've probably set up your  
// kern_pgdir wrong.                                                  
lcr3(PADDR(kern_pgdir));           // cr3 が kern_pgdir の physical address を指すようにする

// Permissions: kernel R, user R                           
kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;   // kern_pgdir を ユーザからも UVPT (user (read only) virtual page table) から見れるようにする
としている。

pte が存在するかどうかは、最下位ビット P を見ればわかる。

# Part 3
PTSIZE - PGSIZE * NPTENTRIES (1024) = 4MB
ULIM - 0xef800000
より上の約 256MB 部分を Kernel が使い、管理するメモリとし、それ以下の部分を user processes 用としている。

ULIM より上は、Kernel が読み書きできるけど、User はアクセスできない
[UTOP, ULIM) は、Kernel, User ともに Read しかできない - Read only で Kernel データを見せる
UTOP 未満は、User process が適当に permission を設定する。

# Ex 3.5
>-// Permissions: kernel R, user R                          
>-kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;
これは、la = PDX(UVPT), ptx, offset でアクセスすると、kern_pgdir[ptx], offset が取れるようにしている。
PDE, PTE の構造が同じであるから、kern_pgdir は本来は、pde のリストだけど、それを pte のリストとして捉えても矛盾を生じないことから、こういうことができる。
  pgdir_walk()
  boot_map_region()
  page_lookup()
  page_remove()
  page_insert(*pp, *va, perm) - pp を linear address va に挿入する (va により指定される PTE が物理アドレス pp を指すようにする) va が
  それをさすようにするという話なので、PDE は必要なら自動的に挿入される。
*pages は、カーネルが page を管理するための構造体の配列。ある *page はそのアドレスから、physical address に対応付けられる。

Map 'pages' read-only by the user at linear address UPAGES
pages そのものは、PageInfo* の配列に過ぎないので、それ一つだけを map しても意味が無いはず。
map するなら、それら全体を map する必要があるはず。UPAGES + i が &pages[i] を指すようにするといいのだろうか？それは、boot_map_region を使うと一気にできる。boot_map_region は、実際の page の有無は気にせず、PDE, PTE をその virtual address が与えられた physical address を指すようにセットアップする。(PDE は必要ならば作成する)

page2pa と PADDR の違い：
page2pa(pages) は ページ pages[0] が指している実態としてのページのアドレスを指す。(つまり、0x0)
PADDR(pages) は、pages 自体がどこのアドレスに存在するかを指す。
